import requests
import logging
import re

from pyquery import PyQuery as pq
from urllib.parse import urljoin

logging.basicConfig(level = logging.INFO, format='%(asctime)s - %(levelname)s: %(message)s')
BASE_URL = 'https://static1.scrape.cuiqingcai.com'
TOTAL_PAGE = 10

def scrape_page(url):
    logging.info('scraping %s...', url)
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text
        logging.error('get invalid status code %s while scraping %s', response.status_code, url)
    except requests.RequestException:
        logging.error('error occurred while scraping %s', url, exc_info=True)

def scrape_index(page):
    index_url = f'{BASE_URL}/page/{page}'
    return scrape_page(index_url)

def parse_index(html):
    doc = pq(html)
    links = doc('.el-card .name')
    for link in links.items():
        href = link.attr('href')
        detail_url = urljoin(BASE_URL, href)
        logging.info('get detail url %s', detail_url)
        yield detail_url

#这里的scrape_detail函数降低耦合度，做到代码复用，意义上更清晰，而且方便扩展
def scrape_detail(url):
    return scrape_page(url)
#封面：是一个 img 节点，其 class 属性为 cover。
#名称：是一个 h2 节点，其内容便是名称。
#类别：是 span 节点，其内容便是类别内容，其外侧是 button 节点，再外侧则是 class 为 categories 的 div 节点。
#上映时间：是 span 节点，其内容包含了上映时间，其外侧是包含了 class 为 info 的 div 节点。
"""注意这个 div 前面 还有一个 class 为 info 的 div 节点，可以使用其内容来区分，也可以使用 nth-child 或 nth-of-type 这样的选择器来区分。
 另外提取结果中还多了「上映」二字，我们可以用正则表达式把日期提取出来。"""
#评分：是一个 p 节点，其内容便是评分，p 节点的 class 属性为 score。
#剧情简介：是一个 p 节点，其内容便是剧情简介，其外侧是 class 为 drama 的 div 节点。
def parse_detail(html):
    doc = pq(html)
    cover = doc('img.cover').attr('src')
    name = doc('a > h2').text()
    categories = [item.text() for item in doc('.categories button span').items()]
    published_at = doc('.info:contains(上映)').text()
    published_at = re.search('(\d{4}-\d{2}-\d{2})', published_at).group(1)\
        if published_at and re.search('\d{4}-\d{2}-\d{2}',published_at) else None
    drama = doc('.drama p').text()
    score = doc('p.score').text()
    score = float(score) if score else None
    return{
        'cover': cover,
        'name': name,
        'categories': categories,
        'published_at': published_at,
        'drama': drama,
        'score': score
    }


def main():  
    for page in range(1, 3):
        index_html = scrape_index(page)
        detail_urls = parse_index(index_html)
        for detail_url in detail_urls:
            detail_html = scrape_detail(detail_url)
            data = parse_detail(detail_html)
            logging.info('get detail data %s',data)
            logging.info('saving data to mongodb')
            save_data(data)
            logging.info('data saved sucessfully')
        
if __name__ == "__main__":
    main()
"""
import pymongo

MONGO_CONNECT_STRING = 'mongodb://loacalhost:27017'
MONGO_DB_NAME = 'movies'
MONGO_COLLECTION_NAME = 'movies'

client = pymongo.Mongoclient(MONGO_CONNECTION_STRING)
db = client['movies']
collection = db['movies']

def save_data(data):
    collection.update_one(
        {
            'name':data.get('name')
        },{
            '$set': data
        }, upsert=True
    )
"""
